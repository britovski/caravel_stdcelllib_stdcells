
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Wolf <claire@symbioticeda.com>          |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.9+3621 (git sha1 84e9fa7, gcc 8.3.1 -fPIC -Os)

[TCL: yosys -import] Command name collision: found pre-existing command `cd' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `eval' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `exec' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `read' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `trace' -> skip.

1. Executing Liberty frontend.
Imported 428 cell types from liberty file.

2. Executing Liberty frontend.
Imported 57 cell types from liberty file.

3. Executing Liberty frontend.
Imported 8 cell types from liberty file.

4. Executing Verilog-2005 frontend: /project/openlane/mgmt_protect/../../verilog/rtl/defines.v
Parsing SystemVerilog input from `/project/openlane/mgmt_protect/../../verilog/rtl/defines.v' to AST representation.
Successfully finished Verilog frontend.

5. Executing Verilog-2005 frontend: /project/openlane/mgmt_protect/../../verilog/rtl/mgmt_protect.v
Parsing SystemVerilog input from `/project/openlane/mgmt_protect/../../verilog/rtl/mgmt_protect.v' to AST representation.
Generating RTLIL representation for module `\mgmt_protect'.
/project/openlane/mgmt_protect/../../verilog/rtl/mgmt_protect.v:301: Warning: Identifier `\user_vdd_powergood' is implicitly declared.
Successfully finished Verilog frontend.

6. Generating Graphviz representation of design.
Writing dot description to `/project/openlane/mgmt_protect/runs/mgmt_protect/tmp/synthesis/hierarchy.dot'.
Dumping module mgmt_protect to page 1.

7. Executing HIERARCHY pass (managing design hierarchy).

7.1. Analyzing design hierarchy..
Top module:  \mgmt_protect

7.2. Analyzing design hierarchy..
Top module:  \mgmt_protect
Removed 0 unused modules.

8. Executing SYNTH pass.

8.1. Executing HIERARCHY pass (managing design hierarchy).

8.1.1. Analyzing design hierarchy..
Top module:  \mgmt_protect

8.1.2. Analyzing design hierarchy..
Top module:  \mgmt_protect
Removed 0 unused modules.

8.2. Executing PROC pass (convert processes to netlists).

8.2.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

8.2.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Removed a total of 0 dead cases.

8.2.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 0 redundant assignments.
Promoted 0 assignments to connections.

8.2.4. Executing PROC_INIT pass (extract init attributes).

8.2.5. Executing PROC_ARST pass (detect async resets in processes).

8.2.6. Executing PROC_MUX pass (convert decision trees to multiplexers).

8.2.7. Executing PROC_DLATCH pass (convert process syncs to latches).

8.2.8. Executing PROC_DFF pass (convert process syncs to FFs).

8.2.9. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

8.3. Executing FLATTEN pass (flatten design).

8.4. Executing OPT_EXPR pass (perform const folding).
Optimizing module mgmt_protect.

8.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \mgmt_protect..
Removed 3 unused cells and 3 unused wires.
<suppressed ~6 debug messages>

8.6. Executing CHECK pass (checking for obvious problems).
checking module mgmt_protect..
Warning: Wire mgmt_protect.\user1_vdd_powergood is used but has no driver.
found and reported 1 problems.

8.7. Executing OPT pass (performing simple optimizations).

8.7.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module mgmt_protect.

8.7.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\mgmt_protect'.
<suppressed ~957 debug messages>
Removed a total of 319 cells.

8.7.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \mgmt_protect..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

8.7.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \mgmt_protect.
Performed a total of 0 changes.

8.7.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\mgmt_protect'.
Removed a total of 0 cells.

8.7.6. Executing OPT_DFF pass (perform DFF optimizations).

8.7.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \mgmt_protect..
Removed 0 unused cells and 319 unused wires.
<suppressed ~1 debug messages>

8.7.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module mgmt_protect.

8.7.9. Rerunning OPT passes. (Maybe there is more to do..)

8.7.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \mgmt_protect..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

8.7.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \mgmt_protect.
Performed a total of 0 changes.

8.7.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\mgmt_protect'.
Removed a total of 0 cells.

8.7.13. Executing OPT_DFF pass (perform DFF optimizations).

8.7.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \mgmt_protect..

8.7.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module mgmt_protect.

8.7.16. Finished OPT passes. (There is nothing left to do.)

8.8. Executing FSM pass (extract and optimize FSM).

8.8.1. Executing FSM_DETECT pass (finding FSMs in design).

8.8.2. Executing FSM_EXTRACT pass (extracting FSM from design).

8.8.3. Executing FSM_OPT pass (simple optimizations of FSMs).

8.8.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \mgmt_protect..

8.8.5. Executing FSM_OPT pass (simple optimizations of FSMs).

8.8.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

8.8.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

8.8.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

8.9. Executing OPT pass (performing simple optimizations).

8.9.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module mgmt_protect.

8.9.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\mgmt_protect'.
Removed a total of 0 cells.

8.9.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \mgmt_protect..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

8.9.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \mgmt_protect.
Performed a total of 0 changes.

8.9.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\mgmt_protect'.
Removed a total of 0 cells.

8.9.6. Executing OPT_DFF pass (perform DFF optimizations).

8.9.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \mgmt_protect..

8.9.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module mgmt_protect.

8.9.9. Finished OPT passes. (There is nothing left to do.)

8.10. Executing WREDUCE pass (reducing word size of cells).

8.11. Executing PEEPOPT pass (run peephole optimizers).

8.12. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \mgmt_protect..

8.13. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module mgmt_protect:
  created 0 $alu and 0 $macc cells.

8.14. Executing SHARE pass (SAT-based resource sharing).

8.15. Executing OPT pass (performing simple optimizations).

8.15.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module mgmt_protect.

8.15.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\mgmt_protect'.
Removed a total of 0 cells.

8.15.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \mgmt_protect..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

8.15.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \mgmt_protect.
Performed a total of 0 changes.

8.15.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\mgmt_protect'.
Removed a total of 0 cells.

8.15.6. Executing OPT_DFF pass (perform DFF optimizations).

8.15.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \mgmt_protect..

8.15.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module mgmt_protect.

8.15.9. Finished OPT passes. (There is nothing left to do.)

8.16. Executing MEMORY pass.

8.16.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

8.16.2. Executing MEMORY_DFF pass (merging $dff cells to $memrd and $memwr).

8.16.3. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \mgmt_protect..

8.16.4. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

8.16.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \mgmt_protect..

8.16.6. Executing MEMORY_COLLECT pass (generating $mem cells).

8.17. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \mgmt_protect..

8.18. Executing OPT pass (performing simple optimizations).

8.18.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module mgmt_protect.
<suppressed ~1 debug messages>

8.18.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\mgmt_protect'.
Removed a total of 0 cells.

8.18.3. Executing OPT_DFF pass (perform DFF optimizations).

8.18.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \mgmt_protect..

8.18.5. Finished fast OPT passes.

8.19. Executing MEMORY_MAP pass (converting $mem cells to logic and flip-flops).

8.20. Executing OPT pass (performing simple optimizations).

8.20.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module mgmt_protect.

8.20.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\mgmt_protect'.
Removed a total of 0 cells.

8.20.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \mgmt_protect..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

8.20.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \mgmt_protect.
Performed a total of 0 changes.

8.20.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\mgmt_protect'.
Removed a total of 0 cells.

8.20.6. Executing OPT_SHARE pass.

8.20.7. Executing OPT_DFF pass (perform DFF optimizations).

8.20.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \mgmt_protect..

8.20.9. Executing OPT_EXPR pass (perform const folding).
Optimizing module mgmt_protect.

8.20.10. Finished OPT passes. (There is nothing left to do.)

8.21. Executing TECHMAP pass (map to technology primitives).

8.21.1. Executing Verilog-2005 frontend: /build/bin/../share/yosys/techmap.v
Parsing Verilog input from `/build/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

8.21.2. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $not.
No more expansions possible.
<suppressed ~78 debug messages>

8.22. Executing OPT pass (performing simple optimizations).

8.22.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module mgmt_protect.

8.22.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\mgmt_protect'.
Removed a total of 0 cells.

8.22.3. Executing OPT_DFF pass (perform DFF optimizations).

8.22.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \mgmt_protect..

8.22.5. Finished fast OPT passes.

8.23. Executing ABC pass (technology mapping using ABC).

8.23.1. Extracting gate netlist of module `\mgmt_protect' to `<abc-temp-dir>/input.blif'..
Extracted 330 gates and 660 wires to a netlist network with 330 inputs and 330 outputs.

8.23.1.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

8.23.1.2. Re-integrating ABC results.
ABC RESULTS:               NOT cells:      330
ABC RESULTS:        internal signals:        0
ABC RESULTS:           input signals:      330
ABC RESULTS:          output signals:      330
Removing temp directory.

8.24. Executing OPT pass (performing simple optimizations).

8.24.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module mgmt_protect.

8.24.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\mgmt_protect'.
Removed a total of 0 cells.

8.24.3. Executing OPT_DFF pass (perform DFF optimizations).

8.24.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \mgmt_protect..
Removed 0 unused cells and 341 unused wires.
<suppressed ~1 debug messages>

8.24.5. Finished fast OPT passes.

8.25. Executing HIERARCHY pass (managing design hierarchy).

8.25.1. Analyzing design hierarchy..
Top module:  \mgmt_protect

8.25.2. Analyzing design hierarchy..
Top module:  \mgmt_protect
Removed 0 unused modules.

8.26. Printing statistics.

=== mgmt_protect ===

   Number of wires:                369
   Number of wire bits:            954
   Number of public wires:          39
   Number of public wire bits:     624
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                613
     $_NOT_                        330
     sky130_fd_sc_hd__buf_8          3
     sky130_fd_sc_hd__conb_1        76
     sky130_fd_sc_hd__einvp_8      202
     sky130_fd_sc_hvl__conb_1        1
     sky130_fd_sc_hvl__lsbufhv2lv_1      1

8.27. Executing CHECK pass (checking for obvious problems).
checking module mgmt_protect..
found and reported 0 problems.

9. Executing SHARE pass (SAT-based resource sharing).

10. Executing OPT pass (performing simple optimizations).

10.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module mgmt_protect.

10.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\mgmt_protect'.
Removed a total of 0 cells.

10.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \mgmt_protect..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

10.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \mgmt_protect.
Performed a total of 0 changes.

10.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\mgmt_protect'.
Removed a total of 0 cells.

10.6. Executing OPT_DFF pass (perform DFF optimizations).

10.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \mgmt_protect..

10.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module mgmt_protect.

10.9. Finished OPT passes. (There is nothing left to do.)

11. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \mgmt_protect..

12. Printing statistics.

=== mgmt_protect ===

   Number of wires:                369
   Number of wire bits:            954
   Number of public wires:          39
   Number of public wire bits:     624
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                613
     $_NOT_                        330
     sky130_fd_sc_hd__buf_8          3
     sky130_fd_sc_hd__conb_1        76
     sky130_fd_sc_hd__einvp_8      202
     sky130_fd_sc_hvl__conb_1        1
     sky130_fd_sc_hvl__lsbufhv2lv_1      1

13. Executing DFFLIBMAP pass (mapping DFF cells to sequential cells from liberty file).
  cell sky130_fd_sc_hd__dfxtp_4 (noninv, pins=3, area=23.77) is a direct match for cell type $_DFF_P_.
  cell sky130_fd_sc_hd__dfrtp_4 (noninv, pins=4, area=28.78) is a direct match for cell type $_DFF_PN0_.
  cell sky130_fd_sc_hd__dfstp_4 (noninv, pins=4, area=30.03) is a direct match for cell type $_DFF_PN1_.
  cell sky130_fd_sc_hd__dfbbn_2 (noninv, pins=6, area=35.03) is a direct match for cell type $_DFFSR_NNN_.
  final dff cell mappings:
    unmapped dff cell: $_DFF_N_
    \sky130_fd_sc_hd__dfxtp_4 _DFF_P_ (.CLK( C), .D( D), .Q( Q));
    unmapped dff cell: $_DFF_NN0_
    unmapped dff cell: $_DFF_NN1_
    unmapped dff cell: $_DFF_NP0_
    unmapped dff cell: $_DFF_NP1_
    \sky130_fd_sc_hd__dfrtp_4 _DFF_PN0_ (.CLK( C), .D( D), .Q( Q), .RESET_B( R));
    \sky130_fd_sc_hd__dfstp_4 _DFF_PN1_ (.CLK( C), .D( D), .Q( Q), .SET_B( R));
    unmapped dff cell: $_DFF_PP0_
    unmapped dff cell: $_DFF_PP1_
    \sky130_fd_sc_hd__dfbbn_2 _DFFSR_NNN_ (.CLK_N( C), .D( D), .Q( Q), .Q_N(~Q), .RESET_B( R), .SET_B( S));
    unmapped dff cell: $_DFFSR_NNP_
    unmapped dff cell: $_DFFSR_NPN_
    unmapped dff cell: $_DFFSR_NPP_
    unmapped dff cell: $_DFFSR_PNN_
    unmapped dff cell: $_DFFSR_PNP_
    unmapped dff cell: $_DFFSR_PPN_
    unmapped dff cell: $_DFFSR_PPP_

13.1. Executing DFFLEGALIZE pass (convert FFs to types supported by the target).
Mapping DFF cells in module `\mgmt_protect':

14. Printing statistics.

=== mgmt_protect ===

   Number of wires:                369
   Number of wire bits:            954
   Number of public wires:          39
   Number of public wire bits:     624
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                613
     $_NOT_                        330
     sky130_fd_sc_hd__buf_8          3
     sky130_fd_sc_hd__conb_1        76
     sky130_fd_sc_hd__einvp_8      202
     sky130_fd_sc_hvl__conb_1        1
     sky130_fd_sc_hvl__lsbufhv2lv_1      1

15. Executing ABC pass (technology mapping using ABC).

15.1. Extracting gate netlist of module `\mgmt_protect' to `/tmp/yosys-abc-XfnrBt/input.blif'..
Extracted 330 gates and 660 wires to a netlist network with 330 inputs and 330 outputs.

15.1.1. Executing ABC.
Running ABC command: /build/bin/yosys-abc -s -f /tmp/yosys-abc-XfnrBt/abc.script 2>&1
ABC: ABC command line: "source /tmp/yosys-abc-XfnrBt/abc.script".
ABC: 
ABC: + read_blif /tmp/yosys-abc-XfnrBt/input.blif 
ABC: + read_lib -w /project/openlane/mgmt_protect/runs/mgmt_protect/tmp/trimmed.lib 
ABC: Parsing finished successfully.  Parsing time =     0.02 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfbbn_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfrbp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfrtp_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfstp_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfxbp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfxtp_4".
ABC: Library "sky130_fd_sc_hd__tt_025C_1v80" from "/project/openlane/mgmt_protect/runs/mgmt_protect/tmp/trimmed.lib" has 43 cells (6 skipped: 6 seq; 0 tri-state; 0 no func; 0 dont_use).  Time =     0.03 sec
ABC: Memory =    1.82 MB. Time =     0.03 sec
ABC: + read_constr -v /project/openlane/mgmt_protect/runs/mgmt_protect/tmp/synthesis/yosys.sdc 
ABC: Setting driving cell to be "sky130_fd_sc_hd__inv_8".
ABC: Setting output load to be 17.650000.
ABC: + read_constr /project/openlane/mgmt_protect/runs/mgmt_protect/tmp/synthesis/yosys.sdc 
ABC: + fx 
ABC: The network is unchanged by fast extract.
ABC: + mfs 
ABC: + strash 
ABC: + refactor 
ABC: + balance 
ABC: + rewrite 
ABC: + refactor 
ABC: + balance 
ABC: + rewrite 
ABC: + rewrite -z 
ABC: + balance 
ABC: + refactor -z 
ABC: + rewrite -z 
ABC: + balance 
ABC: + retime -D -D 10000 -M 5 
ABC: + scleanup 
ABC: Error: The network is combinational.
ABC: + amap -m -Q 0.1 -F 20 -A 20 -C 5000 
ABC: + retime -D -D 10000 
ABC: + buffer -N 5 -S 1000.0 
ABC: + upsize -D 10000 
ABC: Current delay (73.76 ps) does not exceed the target delay (10000.00 ps). Upsizing is not performed.
ABC: + dnsize -D 10000 
ABC: + stime -p 
ABC: WireLoad = "none"  Gates =    330 (100.0 %)   Cap = 11.1 ff (  0.0 %)   Area =     1238.69 (100.0 %)   Delay =    73.76 ps  (100.0 %)               
ABC: Path  0 --       1 : 0    1 pi                     A =   0.00  Df =   6.1   -4.2 ps  S =  17.8 ps  Cin =  0.0 ff  Cout =   4.6 ff  Cmax =   0.0 ff  G =    0  
ABC: Path  1 --     661 : 1    1 sky130_fd_sc_hd__inv_2 A =   3.75  Df =  73.8  -24.4 ps  S =  86.9 ps  Cin =  4.5 ff  Cout =  17.6 ff  Cmax = 331.4 ff  G =  395  
ABC: Start-point = pi0 (\la_output_core [65]).  End-point = po0 ($abc$732$not$/project/openlane/mgmt_protect/../../verilog/rtl/mgmt_protect.v:263$101_Y[65]).
ABC: + print_stats -m 
ABC: netlist                       : i/o =  330/  330  lat =    0  nd =   330  edge =    330  area =1237.50  delay = 1.00  lev = 1
ABC: + write_blif /tmp/yosys-abc-XfnrBt/output.blif 

15.1.2. Re-integrating ABC results.
ABC RESULTS:   sky130_fd_sc_hd__inv_2 cells:      330
ABC RESULTS:        internal signals:        0
ABC RESULTS:           input signals:      330
ABC RESULTS:          output signals:      330
Removing temp directory.

16. Executing SETUNDEF pass (replace undef values with defined constants).

17. Executing HILOMAP pass (mapping to constant drivers).

18. Executing SPLITNETS pass (splitting up multi-bit signals).

19. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \mgmt_protect..
Removed 0 unused cells and 661 unused wires.
<suppressed ~1 debug messages>

20. Executing INSBUF pass (insert buffer cells for connected wires).

21. Executing CHECK pass (checking for obvious problems).
checking module mgmt_protect..
found and reported 0 problems.

22. Printing statistics.

=== mgmt_protect ===

   Number of wires:                443
   Number of wire bits:            954
   Number of public wires:         113
   Number of public wire bits:     624
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                614
     sky130_fd_sc_hd__buf_8          3
     sky130_fd_sc_hd__conb_1        77
     sky130_fd_sc_hd__einvp_8      202
     sky130_fd_sc_hd__inv_2        330
     sky130_fd_sc_hvl__conb_1        1
     sky130_fd_sc_hvl__lsbufhv2lv_1      1

   Area for cell type \sky130_fd_sc_hvl__conb_1 is unknown!
   Area for cell type \sky130_fd_sc_hvl__lsbufhv2lv_1 is unknown!

   Chip area for module '\mgmt_protect': 6122.121600

23. Executing Verilog backend.
Dumping module `\mgmt_protect'.

Warnings: 2 unique messages, 2 total
End of script. Logfile hash: 066e10fc0d, CPU: user 2.18s system 0.06s, MEM: 60.43 MB peak
Yosys 0.9+3621 (git sha1 84e9fa7, gcc 8.3.1 -fPIC -Os)
Time spent: 27% 3x check (0 sec), 17% 6x read_liberty (0 sec), ...
